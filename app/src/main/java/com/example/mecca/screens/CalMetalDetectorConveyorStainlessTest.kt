package com.example.mecca.screens


import CalibrationBanner
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavHostController
import com.example.mecca.CalibrationViewModels.CalibrationMetalDetectorConveyorViewModel
import com.example.mecca.CalibrationViewModels.CalibrationNavigationButtons
import com.example.mecca.formModules.CalibrationHeader
import com.example.mecca.formModules.LabeledTextFieldWithHelp
import com.example.mecca.formModules.LabeledTriStateSwitchAndTextInputWithHelp
import com.example.mecca.formModules.YesNoState

//@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CalMetalDetectorConveyorStainlessTest(
    navController: NavHostController,
    viewModel: CalibrationMetalDetectorConveyorViewModel = viewModel()
) {

    // Stops the next button from being pressed until the screen is rendered
    LaunchedEffect(Unit) {
        viewModel.finishNavigation()
    }

    val progress = viewModel.progress
    val scrollState = rememberScrollState() // Scroll state to control the scroll behavior

// Get and update data in the ViewModel
    val sensitivityAsLeftStainless by viewModel.sensitivityAsLeftStainless
    val peakSignalStainlessLeading by viewModel.peakSignalStainlessLeading
    val peakSignalStainlessMiddle by viewModel.peakSignalStainlessMiddle
    val peakSignalStainlessTrailing by viewModel.peakSignalStainlessTrailing
    val sampleCertificateNumberStainless by viewModel.sampleCertificateNumberStainless
    val detectRejectStainlessLeading by viewModel.detectRejectStainlessLeading
    val detectRejectStainlessMiddle by viewModel.detectRejectStainlessMiddle
    val detectRejectStainlessTrailing by viewModel.detectRejectStainlessTrailing
    val stainlessTestEngineerNotes by viewModel.stainlessTestEngineerNotes


    //Determine if "Next Step" button should be enabled
    val isNextStepEnabled =
        sensitivityAsLeftStainless.isNotBlank() &&
                sampleCertificateNumberStainless.isNotBlank() &&
                (
                        detectRejectStainlessLeading != YesNoState.YES || peakSignalStainlessLeading.isNotBlank()
                        ) &&
                (
                        detectRejectStainlessMiddle != YesNoState.YES || peakSignalStainlessMiddle.isNotBlank()
                        ) &&
                (
                        detectRejectStainlessTrailing != YesNoState.YES || peakSignalStainlessTrailing.isNotBlank()
                        )


    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
            .verticalScroll(scrollState) // Add scrolling to the whole column
    ) {
        CalibrationBanner(
            progress = progress,
            viewModel = viewModel

        )

        // Navigation Buttons
        CalibrationNavigationButtons(
            onPreviousClick = { viewModel.updateStainlessResult() },
            onCancelClick = { viewModel.updateStainlessResult() },
            onNextClick = {
                viewModel.updateStainlessResult()
                navController.navigate("CalMetalDetectorConveyorLargeMetalTest")
            },
            isNextEnabled = isNextStepEnabled,
            isFirstStep = false, // Indicates this is the first step and disables the Previous button
            navController = navController,
            viewModel = viewModel,
            onSaveAndExitClick = {
                viewModel.updateStainlessResult()
            },
        )

        Spacer(modifier = Modifier.height(16.dp))

        CalibrationHeader("Stainless Sensitivity (As Left)")

        Spacer(modifier = Modifier.height(20.dp))


        LabeledTextFieldWithHelp(
            label = "Achieved Sensitivity (mm)",
            value = sensitivityAsLeftStainless,
            onValueChange = { newValue -> viewModel.setSensitivityAsLeftStainless(newValue) },
            helpText = "Enter the achieved sensitivity for Stainless Steel",
            keyboardType = KeyboardType.Number
        )

        LabeledTextFieldWithHelp(
            label = "Sample Certificate Number",
            value = sampleCertificateNumberStainless,
            onValueChange = { newValue -> viewModel.setSampleCertificateNumberStainless(newValue) },
            helpText = "Enter the signal generated by the test pack with the metal sample at the trailing edge of the pack",
        )

        LabeledTriStateSwitchAndTextInputWithHelp(
            label = "D&R (Leading)",
            currentState = detectRejectStainlessLeading,
            onStateChange = { newState -> viewModel.setDetectRejectStainlessLeading(newState) },
            helpText = "Select if there was satisfactory detection and rejection of the pack with the metal sample placed in the leading edge.",
            inputLabel = "Produced Signal",
            inputValue = peakSignalStainlessLeading,
            onInputValueChange = { newValue -> viewModel.setPeakSignalStainlessLeading(newValue) },
            //inputKeyboardType = KeyboardType.Number
        )

        LabeledTriStateSwitchAndTextInputWithHelp(
            label = "D&R (Middle)",
            currentState = detectRejectStainlessMiddle,
            onStateChange = { newState -> viewModel.setDetectRejectStainlessMiddle(newState) },
            helpText = "Select if there was satisfactory detection and rejection of the pack with the metal sample placed in the middle.",
            inputLabel = "Produced Signal",
            inputValue = peakSignalStainlessMiddle,
            onInputValueChange = { newValue -> viewModel.setPeakSignalStainlessMiddle(newValue) },
            //inputKeyboardType = KeyboardType.Number
        )

        LabeledTriStateSwitchAndTextInputWithHelp(
            label = "D&R (Trailing)",
            currentState = detectRejectStainlessTrailing,
            onStateChange = { newState -> viewModel.setDetectRejectStainlessTrailing(newState) },
            helpText = "Select if there was satisfactory detection and rejection of the pack with the metal sample placed in the trailing edge.",
            inputLabel = "Produced Signal",
            inputValue = peakSignalStainlessTrailing,
            onInputValueChange = { newValue -> viewModel.setPeakSignalStainlessTrailing(newValue) },
            //inputKeyboardType = KeyboardType.Number
        )
        Spacer(modifier = Modifier.height(16.dp))

        LabeledTextFieldWithHelp(
            label = "Engineer Notes",
            value = stainlessTestEngineerNotes,
            onValueChange = { newValue -> viewModel.setStainlessTestEngineerNotes(newValue) },
            helpText = "Enter any notes relevant to this section",
            isNAToggleEnabled = false
        )
        




        Spacer(modifier = Modifier.height(16.dp))


    }
}
