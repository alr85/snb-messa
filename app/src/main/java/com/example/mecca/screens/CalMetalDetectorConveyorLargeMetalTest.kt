package com.example.mecca.screens


import CalibrationBanner
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavHostController
import com.example.mecca.CalibrationViewModels.CalibrationMetalDetectorConveyorViewModel
import com.example.mecca.CalibrationViewModels.CalibrationNavigationButtons
import com.example.mecca.formModules.LabeledTextFieldWithHelp
import com.example.mecca.formModules.LabeledTriStateSwitchWithHelp
import com.example.mecca.formModules.YesNoState

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CalMetalDetectorConveyorLargeMetalTest(
    navController: NavHostController,
    viewModel: CalibrationMetalDetectorConveyorViewModel = viewModel()
) {
    // Stops the next button from being pressed until the screen is rendered
    LaunchedEffect(Unit) {
        viewModel.finishNavigation()
    }

    val progress = viewModel.progress
    val scrollState = rememberScrollState()

    // Get and update data in the ViewModel

    val detectRejectLargeMetal by viewModel.detectRejectLargeMetal
    val sampleCertificateNumberLargeMetal by viewModel.sampleCertificateNumberLargeMetal
    val largeMetalTestEngineerNotes by viewModel.largeMetalTestEngineerNotes

    //Determine if "Next Step" button should be enabled
    val isNextStepEnabled =
                sampleCertificateNumberLargeMetal.isNotBlank()


    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
            .verticalScroll(scrollState)
    ) {
        CalibrationBanner(
            progress = progress,
            viewModel = viewModel
        )

        // Navigation Buttons
        CalibrationNavigationButtons(
            onPreviousClick = { viewModel.updateLargeMetalResult() },
            onCancelClick = { viewModel.updateLargeMetalResult() },
            onNextClick = {
                viewModel.updateLargeMetalResult()
                navController.navigate("CalMetalDetectorConveyorDetectionSettingsAsLeft")
                          },
            isNextEnabled = isNextStepEnabled,
            isFirstStep = false,
            navController = navController,
            viewModel = viewModel,
            onSaveAndExitClick = { viewModel.updateLargeMetalResult() },
        )

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Large Metal (20mm Fe) Test Result",
            style = MaterialTheme.typography.headlineMedium,
            maxLines = 1,
        )

        Spacer(modifier = Modifier.height(20.dp))


        LabeledTriStateSwitchWithHelp(
            label = "D&R OK",
            currentState = detectRejectLargeMetal,
            onStateChange = { newState -> viewModel.setDetectRejectLargeMetal(newState) },
            helpText = "Select if there was satisfactory detection and rejection of the metal sample: Yes, N/A, or No."
        )

        LabeledTextFieldWithHelp(
            label = "Sample Certificate No.",
            value = sampleCertificateNumberLargeMetal,
            onValueChange = { newValue -> viewModel.setSampleCertificateNumberLargeMetal(newValue) },
            helpText = "Enter the signal generated by the test pack with the metal sample at the trailing edge of the pack",
        )

        Spacer(modifier = Modifier.height(16.dp))

        LabeledTextFieldWithHelp(
            label = "Engineer Notes",
            value = largeMetalTestEngineerNotes,
            onValueChange = { newValue -> viewModel.setLargeMetalTestEngineerNotes(newValue) },
            helpText = "Enter any notes relevant to this section",
            isNAToggleEnabled = false
        )


    }
}
